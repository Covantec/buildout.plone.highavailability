# Plone Production configuration file
[buildout]

extends =
    base.cfg
    custom-settings.cfg
    plone-4.3.4.cfg
    hotfix.cfg
    production-kgv.cfg
    munin-install.cfg
    munin-zope.cfg
    munin-plone.cfg
    munin-haproxy.cfg
    munin-varnish.cfg
    munin-nginx.cfg

parts +=
    client2
    client3
    client4
    client-debug
    sitecustomize-base
    client1-sitecustomize
    client2-sitecustomize
    client3-sitecustomize
    client4-sitecustomize
    client-debug-sitecustomize
    nginx-config
    nginx-vhost-conf
    pcre
    varnish-build
    varnish-config
    varnish
    varnishlog
    haproxy-build
    haproxy-config
    supervisor
    supervisor-crontab
    logrotate-config
    logrotate-crontab
    os-config
    backup
    backup-daily-crontab
    backup-weekly-crontab
    backup-full-weekly-crontab
    maintenance-schedule-crontab

##############################################################################
#  Configurations.
##############################################################################

# Plone Website names using for virtual hosting configurations
[plone-sites]
main = ${site-settings:site-id}

[client2]
<= client_base
recipe                = plone.recipe.zope2instance
http-address          = ${hosts:client2}:${ports:client2}
# Put the log, pid, loc files in var/client2
event-log             = ${buildout:directory}/var/${:_buildout_section_name_}/event.log
z2-log                = ${buildout:directory}/var/${:_buildout_section_name_}/Z2.log
pid-file              = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.pid
lock-file             = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.lock

[client3]
<= client_base
recipe                = plone.recipe.zope2instance
http-address          = ${hosts:client3}:${ports:client3}
# Put the log, pid, loc files in var/client3
event-log             = ${buildout:directory}/var/${:_buildout_section_name_}/event.log
z2-log                = ${buildout:directory}/var/${:_buildout_section_name_}/Z2.log
pid-file              = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.pid
lock-file             = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.lock

[client4]
<= client_base
recipe                = plone.recipe.zope2instance
http-address          = ${hosts:client4}:${ports:client4}
# Put the log, pid, loc files in var/client4
event-log             = ${buildout:directory}/var/${:_buildout_section_name_}/event.log
z2-log                = ${buildout:directory}/var/${:_buildout_section_name_}/Z2.log
pid-file              = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.pid
lock-file             = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.lock

# Zeo client instance for debugging
[client-debug]
<= client_base
recipe                = plone.recipe.zope2instance
http-address          = ${hosts:client-debug}:${ports:client-debug}
zeo-address           = ${hosts:zeoserver}:${ports:zeoserver}
debug-mode            = on
verbose-security      = on
zodb-cache-size       = 5000
# Put the log, pid, loc files in var/client-debug
event-log             = ${buildout:directory}/var/${:_buildout_section_name_}/event.log
z2-log                = ${buildout:directory}/var/${:_buildout_section_name_}/Z2.log
pid-file              = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.pid
lock-file             = ${buildout:directory}/var/${:_buildout_section_name_}/${:_buildout_section_name_}.lock

[client1-sitecustomize]
<= sitecustomize-base
output = ${client1:location}/sitecustomize.py

[client2-sitecustomize]
<= sitecustomize-base
output = ${client2:location}/sitecustomize.py

[client3-sitecustomize]
<= sitecustomize-base
output = ${client3:location}/sitecustomize.py

[client4-sitecustomize]
<= sitecustomize-base
output = ${client4:location}/sitecustomize.py

[client-debug-sitecustomize]
<= sitecustomize-base
output = ${client-debug:location}/sitecustomize.py

# This recipe generates Nginx Web Server configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[nginx-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/nginx.conf.in
output = ${buildout:directory}/etc/nginx.conf
worker_processes = ${nginx:worker_processes}
worker_connections = ${nginx:worker_connections}

# This recipe generates VirtualHost Nginx Web Server configuration
# For options see http://pypi.python.org/pypi/collective.recipe.template
[nginx-vhost-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/nginx-vhost.conf.in
output = ${buildout:directory}/etc/nginx-vhost.conf

# A dependency for build Varnish
# For options see http://pypi.python.org/pypi/hexagonit.recipe.cmmi
[pcre]
recipe = hexagonit.recipe.cmmi
url = ${downloads:pcre}
keep-compile-dir = true

# Varnish, acting as a reverse lookup caching proxy
# For options see http://pypi.python.org/pypi/hexagonit.recipe.cmmi
[varnish-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:varnish}
configure-options =
   --with-pcre=${pcre:location}/../pcre__compile__/pcre-8.31

# This recipe generates Varnish configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[varnish-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/varnish.vcl.in
output = ${buildout:directory}/etc/varnish.vcl

# This recipe help to install Varnish.
# For options see http://pypi.python.org/pypi/plone.recipe.varnish
[varnish]
recipe = plone.recipe.varnish
daemon = ${varnish-build:location}/sbin/varnishd
mode = ${varnish-settings:mode}
bind = ${hosts:varnish}:${ports:varnish}
cache-size = ${varnish-settings:cache-size}
config = ${buildout:directory}/etc/varnish.vcl

# This recipe generates a bash script for varnishlog command
# For options see http://pypi.python.org/pypi/collective.recipe.template
[varnishlog]
recipe = collective.recipe.template
input = inline:
    ${varnish-build:location}/bin/varnishlog
output = ${buildout:bin-directory}/varnishlog
mode = 755

# HAProxy, used as a load haproxy over the two Zope instances
# For options see http://pypi.python.org/pypi/plone.recipe.haproxy
[haproxy-build]
recipe = plone.recipe.haproxy
url = ${downloads:haproxy}
cpu = ${build:cpu}
target = ${build:target}
pcre = 1

# This recipe generates HAProxy configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[haproxy-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/haproxy.conf.in
output = ${buildout:directory}/etc/haproxy.conf
maxconn = ${haproxy-settings:maxconn}
ulimit-n = ${haproxy-settings:ulimit-n}

##############################################################################
# Supervisor
##############################################################################

# This recipe help to install Supervisor, one to rule them all
# For options see http://pypi.python.org/pypi/collective.recipe.supervisor
[supervisor]
recipe = collective.recipe.supervisor
port = ${ports:supervisor}
user = ${supervisor-settings:user}
password = ${supervisor-settings:password}
serverurl = http://${hosts:supervisor}:${ports:supervisor}
loglevel = info
logfile = ${buildout:directory}/var/log/supervisord.log
logfile_maxbytes = 50MB
logfile_backups = 10
pidfile = ${buildout:directory}/var/supervisord.pid
file = ${buildout:directory}/var/supervisord.sock
chmod = 0700
nodaemon = false
#plugins = superlance
programs =
#  Prio Name      Program                                      Params
   10   zeoserver ${buildout:bin-directory}/zeoserver   [foreground]   ${zeoserver:location}   true
   20   client1 ${buildout:bin-directory}/client1   [console]   ${client1:location}   true
   20   client2 ${buildout:bin-directory}/client2   [console]   ${client2:location}   true
   20   client3 ${buildout:bin-directory}/client3   [console]   ${client3:location}   true
   20   client4 ${buildout:bin-directory}/client4   [console]   ${client4:location}   true
   30   haproxy ${buildout:bin-directory}/haproxy   [-f ${haproxy-config:output} -db]   true
   40   varnish ${buildout:bin-directory}/varnish   true

eventlisteners =
# Check every 60 seconds that no child process has exceeded. it's like a RSS memory quota
#    MemoryMonitor TICK_60 ${buildout:bin-directory}/memmon [-g zeo-clients=${quotas:instance-memory} -m ${site-settings:mail-for-errors}]
# Check every 60 seconds whether the plone instance is alive
#    HttpOk1 TICK_60 ${buildout:bin-directory}/httpok [-p client1 -t 20 http://${hosts:client1}:${ports:client1}/${plone-sites:main}]
#    HttpOk2 TICK_60 ${buildout:bin-directory}/httpok [-p client2 -t 20 http://${hosts:client2}:${ports:client2}/${plone-sites:main}]
#    HttpOk3 TICK_60 ${buildout:bin-directory}/httpok [-p client3 -t 20 http://${hosts:client3}:${ports:client3}/${plone-sites:main}]
#    HttpOk4 TICK_60 ${buildout:bin-directory}/httpok [-p client4 -t 20 http://${hosts:client4}:${ports:client4}/${plone-sites:main}]

groups =
    10 zeo-cluster zeoserver
    20 zeo-clients client1,client2,client3,client4
    30 others haproxy,varnish
#    40 httpok HttpOk1,HttpOk2,HttpOk3,HttpOk4

# This recipe help to Run once Supervisor, at startup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[supervisor-crontab]
recipe = z3c.recipe.usercrontab
# copied from https://help.ubuntu.com/community/CronHowto
times = @reboot
command = ${buildout:bin-directory}/supervisord

##############################################################################
# logs
##############################################################################

# This recipe generates logrotate configurations
# For options see http://pypi.python.org/pypi/collective.recipe.template
[logrotate-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/logrotate.conf.template
output = ${buildout:directory}/etc/logrotate.conf

# This recipe to install a schedule task to run logrotate
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[logrotate-crontab]
recipe = z3c.recipe.usercrontab
# copied from https://help.ubuntu.com/community/CronHowto
times = @daily
command = /usr/sbin/logrotate -s ${buildout:directory}/var/logrotate.status ${logrotate-config:output}

################################################################################
# maintenance and backup
################################################################################

# Helper script to update Services configurations into Operative System
# For options see http://pypi.python.org/pypi/collective.recipe.template
[os-config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/update-so-config.sh.in
output = ${buildout:bin-directory}/update-so-config.sh
mode = 700

# For options see http://pypi.python.org/pypi/collective.recipe.backup
[backup]
recipe = collective.recipe.backup
# Keep the last 4 backups
keep = 4
# Gzip it
gzip = true
# Command to execute before starting the backup.
pre_command = echo '\nCan I have a backup?'
# Command to execute after the backup has finished.
post_command =
    echo '\nThanks a lot for the backup.'
    echo 'We are done.'

# This recipe to install a schedule task to makes an incremental backup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[backup-daily-crontab]
recipe = z3c.recipe.usercrontab
times = 0 2 * * 0-6
command = ${buildout:bin-directory}/backup

# This recipe to install a schedule task to makes a full backup, separate 
# from the regular backups. Handy for copying the current production database 
# to your laptop or right before a big change in the site.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[backup-weekly-crontab]
recipe = z3c.recipe.usercrontab
times = 0 2 * * 7
command = ${buildout:bin-directory}/snapshotbackup

# This recipe to install a schedule task to makes always makes a full backup.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[backup-full-weekly-crontab]
recipe = z3c.recipe.usercrontab
times = 0 2 * * 7
command = ${buildout:bin-directory}/fullbackup

# This recipe to install a schedule task to makes once a week, to remove 
# unused objects from your Zope Data.fs.
# For options see http://pypi.python.org/pypi/z3c.recipe.usercrontab
[maintenance-schedule-crontab]
recipe = z3c.recipe.usercrontab
times = 0 3 * * 7
command = ${buildout:bin-directory}/zeopack

[sources]